/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/oauth-1.0a";
exports.ids = ["vendor-chunks/oauth-1.0a"];
exports.modules = {

/***/ "(rsc)/./node_modules/oauth-1.0a/oauth-1.0a.js":
/*!***********************************************!*\
  !*** ./node_modules/oauth-1.0a/oauth-1.0a.js ***!
  \***********************************************/
/***/ ((module) => {

eval("if (true) {\n    module.exports = OAuth;\n}\n\n/**\n * Constructor\n * @param {Object} opts consumer key and secret\n */\nfunction OAuth(opts) {\n    if(!(this instanceof OAuth)) {\n        return new OAuth(opts);\n    }\n\n    if(!opts) {\n        opts = {};\n    }\n\n    if(!opts.consumer) {\n        throw new Error('consumer option is required');\n    }\n\n    this.consumer            = opts.consumer;\n    this.nonce_length        = opts.nonce_length || 32;\n    this.version             = opts.version || '1.0';\n    this.parameter_seperator = opts.parameter_seperator || ', ';\n    this.realm               = opts.realm;\n\n    if(typeof opts.last_ampersand === 'undefined') {\n        this.last_ampersand = true;\n    } else {\n        this.last_ampersand = opts.last_ampersand;\n    }\n\n    // default signature_method is 'PLAINTEXT'\n    this.signature_method = opts.signature_method || 'PLAINTEXT';\n\n    if(this.signature_method == 'PLAINTEXT' && !opts.hash_function) {\n        opts.hash_function = function(base_string, key) {\n            return key;\n        }\n    }\n\n    if(!opts.hash_function) {\n        throw new Error('hash_function option is required');\n    }\n\n    this.hash_function = opts.hash_function;\n    this.body_hash_function = opts.body_hash_function || this.hash_function;\n}\n\n/**\n * OAuth request authorize\n * @param  {Object} request data\n * {\n *     method,\n *     url,\n *     data\n * }\n * @param  {Object} key and secret token\n * @return {Object} OAuth Authorized data\n */\nOAuth.prototype.authorize = function(request, token) {\n    var oauth_data = {\n        oauth_consumer_key: this.consumer.key,\n        oauth_nonce: this.getNonce(),\n        oauth_signature_method: this.signature_method,\n        oauth_timestamp: this.getTimeStamp(),\n        oauth_version: this.version\n    };\n\n    if(!token) {\n        token = {};\n    }\n\n    if(token.key !== undefined) {\n        oauth_data.oauth_token = token.key;\n    }\n\n    if(!request.data) {\n        request.data = {};\n    }\n\n    if(request.includeBodyHash) {\n      oauth_data.oauth_body_hash = this.getBodyHash(request, token.secret)\n    }\n\n    oauth_data.oauth_signature = this.getSignature(request, token.secret, oauth_data);\n\n    return oauth_data;\n};\n\n/**\n * Create a OAuth Signature\n * @param  {Object} request data\n * @param  {Object} token_secret key and secret token\n * @param  {Object} oauth_data   OAuth data\n * @return {String} Signature\n */\nOAuth.prototype.getSignature = function(request, token_secret, oauth_data) {\n    return this.hash_function(this.getBaseString(request, oauth_data), this.getSigningKey(token_secret));\n};\n\n/**\n * Create a OAuth Body Hash\n * @param {Object} request data\n */\nOAuth.prototype.getBodyHash = function(request, token_secret) {\n  var body = typeof request.data === 'string' ? request.data : JSON.stringify(request.data)\n\n  if (!this.body_hash_function) {\n    throw new Error('body_hash_function option is required');\n  }\n\n  return this.body_hash_function(body, this.getSigningKey(token_secret))\n};\n\n/**\n * Base String = Method + Base Url + ParameterString\n * @param  {Object} request data\n * @param  {Object} OAuth data\n * @return {String} Base String\n */\nOAuth.prototype.getBaseString = function(request, oauth_data) {\n    return request.method.toUpperCase() + '&' + this.percentEncode(this.getBaseUrl(request.url)) + '&' + this.percentEncode(this.getParameterString(request, oauth_data));\n};\n\n/**\n * Get data from url\n * -> merge with oauth data\n * -> percent encode key & value\n * -> sort\n *\n * @param  {Object} request data\n * @param  {Object} OAuth data\n * @return {Object} Parameter string data\n */\nOAuth.prototype.getParameterString = function(request, oauth_data) {\n    var base_string_data;\n    if (oauth_data.oauth_body_hash) {\n        base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.deParamUrl(request.url))));\n    } else {\n        base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.mergeObject(request.data, this.deParamUrl(request.url)))));\n    }\n\n    var data_str = '';\n\n    //base_string_data to string\n    for(var i = 0; i < base_string_data.length; i++) {\n        var key = base_string_data[i].key;\n        var value = base_string_data[i].value;\n        // check if the value is an array\n        // this means that this key has multiple values\n        if (value && Array.isArray(value)){\n          // sort the array first\n          value.sort();\n\n          var valString = \"\";\n          // serialize all values for this key: e.g. formkey=formvalue1&formkey=formvalue2\n          value.forEach((function(item, i){\n            valString += key + '=' + item;\n            if (i < value.length){\n              valString += \"&\";\n            }\n          }).bind(this));\n          data_str += valString;\n        } else {\n          data_str += key + '=' + value + '&';\n        }\n    }\n\n    //remove the last character\n    data_str = data_str.substr(0, data_str.length - 1);\n    return data_str;\n};\n\n/**\n * Create a Signing Key\n * @param  {String} token_secret Secret Token\n * @return {String} Signing Key\n */\nOAuth.prototype.getSigningKey = function(token_secret) {\n    token_secret = token_secret || '';\n\n    if(!this.last_ampersand && !token_secret) {\n        return this.percentEncode(this.consumer.secret);\n    }\n\n    return this.percentEncode(this.consumer.secret) + '&' + this.percentEncode(token_secret);\n};\n\n/**\n * Get base url\n * @param  {String} url\n * @return {String}\n */\nOAuth.prototype.getBaseUrl = function(url) {\n    return url.split('?')[0];\n};\n\n/**\n * Get data from String\n * @param  {String} string\n * @return {Object}\n */\nOAuth.prototype.deParam = function(string) {\n    var arr = string.split('&');\n    var data = {};\n\n    for(var i = 0; i < arr.length; i++) {\n        var item = arr[i].split('=');\n\n        // '' value\n        item[1] = item[1] || '';\n\n        // check if the key already exists\n        // this can occur if the QS part of the url contains duplicate keys like this: ?formkey=formvalue1&formkey=formvalue2\n        if (data[item[0]]){\n          // the key exists already\n          if (!Array.isArray(data[item[0]])) {\n            // replace the value with an array containing the already present value\n            data[item[0]] = [data[item[0]]];\n          }\n          // and add the new found value to it\n          data[item[0]].push(decodeURIComponent(item[1]));\n        } else {\n          // it doesn't exist, just put the found value in the data object\n          data[item[0]] = decodeURIComponent(item[1]);\n        }\n    }\n\n    return data;\n};\n\n/**\n * Get data from url\n * @param  {String} url\n * @return {Object}\n */\nOAuth.prototype.deParamUrl = function(url) {\n    var tmp = url.split('?');\n\n    if (tmp.length === 1)\n        return {};\n\n    return this.deParam(tmp[1]);\n};\n\n/**\n * Percent Encode\n * @param  {String} str\n * @return {String} percent encoded string\n */\nOAuth.prototype.percentEncode = function(str) {\n    return encodeURIComponent(str)\n        .replace(/\\!/g, \"%21\")\n        .replace(/\\*/g, \"%2A\")\n        .replace(/\\'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\");\n};\n\n/**\n * Percent Encode Object\n * @param  {Object} data\n * @return {Object} percent encoded data\n */\nOAuth.prototype.percentEncodeData = function(data) {\n    var result = {};\n\n    for(var key in data) {\n        var value = data[key];\n        // check if the value is an array\n        if (value && Array.isArray(value)){\n          var newValue = [];\n          // percentEncode every value\n          value.forEach((function(val){\n            newValue.push(this.percentEncode(val));\n          }).bind(this));\n          value = newValue;\n        } else {\n          value = this.percentEncode(value);\n        }\n        result[this.percentEncode(key)] = value;\n    }\n\n    return result;\n};\n\n/**\n * Get OAuth data as Header\n * @param  {Object} oauth_data\n * @return {String} Header data key - value\n */\nOAuth.prototype.toHeader = function(oauth_data) {\n    var sorted = this.sortObject(oauth_data);\n\n    var header_value = 'OAuth ';\n\n    if (this.realm) {\n        header_value += 'realm=\"' + this.realm + '\"' + this.parameter_seperator;\n    }\n\n    for(var i = 0; i < sorted.length; i++) {\n        if (sorted[i].key.indexOf('oauth_') !== 0)\n            continue;\n\n        header_value += this.percentEncode(sorted[i].key) + '=\"' + this.percentEncode(sorted[i].value) + '\"' + this.parameter_seperator;\n    }\n\n    return {\n        Authorization: header_value.substr(0, header_value.length - this.parameter_seperator.length) //cut the last chars\n    };\n};\n\n/**\n * Create a random word characters string with input length\n * @return {String} a random word characters string\n */\nOAuth.prototype.getNonce = function() {\n    var word_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    var result = '';\n\n    for(var i = 0; i < this.nonce_length; i++) {\n        result += word_characters[parseInt(Math.random() * word_characters.length, 10)];\n    }\n\n    return result;\n};\n\n/**\n * Get Current Unix TimeStamp\n * @return {Int} current unix timestamp\n */\nOAuth.prototype.getTimeStamp = function() {\n    return parseInt(new Date().getTime()/1000, 10);\n};\n\n////////////////////// HELPER FUNCTIONS //////////////////////\n\n/**\n * Merge object\n * @param  {Object} obj1\n * @param  {Object} obj2\n * @return {Object}\n */\nOAuth.prototype.mergeObject = function(obj1, obj2) {\n    obj1 = obj1 || {};\n    obj2 = obj2 || {};\n\n    var merged_obj = obj1;\n    for(var key in obj2) {\n        merged_obj[key] = obj2[key];\n    }\n    return merged_obj;\n};\n\n/**\n * Sort object by key\n * @param  {Object} data\n * @return {Array} sorted array\n */\nOAuth.prototype.sortObject = function(data) {\n    var keys = Object.keys(data);\n    var result = [];\n\n    keys.sort();\n\n    for(var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        result.push({\n            key: key,\n            value: data[key],\n        });\n    }\n\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/oauth-1.0a/oauth-1.0a.js\n");

/***/ })

};
;